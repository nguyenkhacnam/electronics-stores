openapi: 3.0.3
info:
  title: Electronics-Stores
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: namkhac605@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3001/api
tags:
  - name: users
    description: Các API liên quan đến user
paths:
  /user/register:
    post:
      tags:
        - users
      summary: Đăng Ký
      description: Đăng ký tài khoản ứng dụng
      operationId: register
      requestBody:
        description: Thông tin đăng ký
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '201':
          description: Register Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                requiredInput:
                  value:
                    status: ERR
                    message: The input is required
                isCheckEmail: 
                  value:
                    status: ERR
                    message: The email is not valid
                emailExists:
                  value:
                    status: ERR
                    message: The email is already exist
        '404':
          description: 404 not found
  /user/login:
    post:
      tags:
        - users
      summary: Đăng Nhập
      description: Đăng nhập ứng dụng
      operationId: login
      requestBody:
        description: Thông tin đăng nhập
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Login Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                account does not exist: 
                  value:
                    status: ERR
                    message: The account does not exist
                requiredInput:
                  value:
                    status: ERR
                    message: The input is required
                password or user is incorrect:
                  value:
                    status: ERR
                    message: The password or user is incorrect
        '404':
          description: 404 not found
  /user/getDetailUser/{id}: 
    get:
      tags:
        - users
      summary: Get detail user by ID
      description: Returns a single user
      operationId: getDetailUser
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Get Detail User success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDetailUserResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              examples:
                requiredUserId:
                  value:
                    status: ERR
                    message: The userId is required
                user is not defined: 
                  value:
                    status: ERR
                    message: The user is not defined
        '404':
          description: 404 not found

components:
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: nguyenkhacnam@gmail.com
        password:
          type: string
          example: nam123
        confirmPassword:
          type: string
          example: nam123
    RegisterResponse:
      type: object
      properties:
        status: 
          type: string
          example: OK
        message: 
          type: string
          example: Register Successfully
        data: 
          type: object
          properties:
            email: 
              type: string 
              example: nguyenkhacnam@gmail.com
            password: 
              type: string 
              example: $2b$10$YoolI.IYOo/hj3Fs/k6/dez.q9FdYMu5iTk0QCY50/8L5lM50iiz6
            isAdmin: 
              type: boolean
              example: false
            id: 
              type: string
              example: 6514d9dc6e801f792702ebec
            createdAt:
              type: string
              example: 2023-09-28T01:41:48.255Z
            updatedAt:
              type: string
              example: 2023-09-28T01:41:48.255Z
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: nguyenkhacnam@gmail.com
        password:
          type: string
          example: nam123
    LoginResponse:
      type: object
      properties:
        status: 
          type: string
          example: OK
        message: 
          type: string
          example: Login Successfully
        accessToken:
          type: string  
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7ImlkIjoiNjRmNGIyZDEwMjE2NjFhOTQyYjQzY2EzIiwiaXNBZG1pbiI6dHJ1ZX0sImlhdCI6MTY5NTg2OTg2NSwiZXhwIjoxNjk1ODY5ODg1fQ.CfMkwwqctLMIoujSxvufHWjpqqp0lPcDqLrbtm25iI4
    getDetailUserResponse:
      type: object
      properties:
        status: 
          type: string
          example: OK
        message: 
          type: string
          example: Get Detail User success
        data: 
          type: object
          properties:
            name:
              type: string
              default: ""
            phone:
              type: number
              default: null
            address:
              type: string
              default: ""
            avatar:
              type: string
              default: ""
            city:
              type: string
              default: ""
            _id:
              type: string
              format: MongoId
              example: "6514d9dc6e801f792702ebec"
            email:
              type: string
              example: "nguyenkhacnam@gmail.com"
            password:
              type: string
              example: "$2b$10$gLfptQvnTv1pcpKBoC32W.PXX.mLyPK2eVwPEioCBtcu2ZGPGJdFS"
            isAdmin:
              type: boolean
              example: false
            createdAt:
              type: string
              format: date-time
              example: "2023-09-28T01:41:48.255Z"
            updatedAt:
              type: string
              format: date-time
              example: "2023-09-28T01:41:48.255Z"
            __v:
              type: integer
              example: 0
  securitySchemes:
     bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT